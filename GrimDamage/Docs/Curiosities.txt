# Engine


unsigned short const * GAME::Player::GetPlayerName(void)
void GAME::Player::PostPetSpawn(class GAME::WorldVec3 const &,unsigned int,unsigned int,unsigned int)
void __userpurge GAME::Skill_SpawnPet::ActivateNow(GAME::Skill_SpawnPet *this@<ecx>, int a2@<ebx>, int a3@<edi>, double a4@<st0>, struct GAME::Character *a5, const struct GAME::Name *a6, unsigned int a7, const struct GAME::WorldVec3 *a8)
^--- Should be able to get the pets ID, and player ID.

::Player::
::ControllerPet::
CharAttributeStore_SkillPenalty
DefenseAttributeStore_Skill
class mem::list<struct GAME::SkillBuffTransfer> const & GAME::SkillServices_Character::GetBuffList(void)
^y  Racial Bonus Defense (%f) filtered (%f) damage\n


* GAME::Character::GetAngerMultiplier <- Aggro meter??!??
Ceno:
>oh, shit, regarding your anger question
>enemies have an anger limit above which they'll aggro a target
>and it builds up as player's near or use skills/etc.
>it decays as players flee


GAME::GameEngine::CreateItem(GAME::WorldCoords const &,GAME::ItemReplicaInfo &)                                                                                              .text 101C2050 00000023 00000004 00000008 R . . . B T .
GAME::GameEngine::CreateItemForCharacter(uint,GAME::WorldCoords const &,GAME::ItemReplicaInfo &,std::basic_string<ushort,std::char_traits<ushort>,std::allocator<ushort>> *) .text 101C2080 0000001B 00000004 0000000C R . . . B . .
char __thiscall GAME::PlayerInventoryCtrl::UsePotionOfType(int this, int a2, int a3, float a4)
char __thiscall GAME::PlayerInventoryCtrl::UsePotionOfType(_DWORD *this, float a2)


# Engine 
Curiosities for IA: -- Maybe delve into this?
bool GAME::Steamworks::CloudRead(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void *,unsigned int)
bool GAME::Steamworks::CloudWrite(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,unsigned int,bool)

